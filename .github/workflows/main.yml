# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v4

    # Step 2: Use Node.js from package.json
    - name: Set up Node.js environment
      uses: actions/setup-node@v4
      with:
         node-version-file: './package.json'
         cache: 'npm'

    # Step 3: Install dependencies
    - name: Install NPM dependencies
      run: npm ci

    # Step 4: Build the application
    - name: Build the application
      run: npm run build

    # Step 5: Run tests
    - name: Run tests
      run: npm test

    # Step 6: Build and push Docker image
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-nodejs-app:latest .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-nodejs-app:latest
    # - name: Build and Push Docker Image
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: .
    #     push: true
    #     tags: blakiowrld/my-nodejs-app:latest
    #     registry: docker.io
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 7: Additional Debugging - Echo Docker Hub login
    - name: Docker Hub Login Debug
      run: echo "Docker Hub Login for user ${{ secrets.DOCKER_USERNAME }}"

    # Step 8: Additional Debugging - Display Node.js Version
    - name: Display Node.js Version
      run: node -v

        
